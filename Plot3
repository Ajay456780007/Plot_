function Plot(varName, sourceStruct, subplotLayout, showPlots, savePlots, yLabelStr)

    % ----- Config -----
    num_models = 7;
    legends = {'Model1','Model2','Model3','Model4','Model5','Model6','Model7'};  % fixed names
    modelColors = lines(num_models);                                             % one color per model [7x3]
                                                                                % lines() gives distinct colors
    % ----- Load .mat files -----
    models = cell(1,num_models);
    for i = 1:num_models
        S  = load(sprintf('Model%d.mat', i));
        fn = fieldnames(S);
        models{i} = S.(fn{1});
    end

    % ----- Extract per-phase series and normalize to 2-D -----
    labels  = {};      % ModelX_PhaseY for CSV
    allT    = {};      % cell of time vectors
    allY    = {};      % cell of column vectors
    colsByModel = cell(1,num_models);   % which DataMat columns belong to each model

    for i = 1:num_models
        if isfield(models{i}, sourceStruct)
            s = models{i}.(sourceStruct);
            f = fieldnames(s);
            ix = find(strcmpi(f, varName), 1);
            if ~isempty(ix)
                ts = s.(f{ix});               % timeseries object
                d  = ts.Data;
                % Normalize to N x M (e.g., N x 1 x 3 -> N x 3)
                if ndims(d) > 2
                    d = reshape(d, size(d,1), []);
                end
                ncol = size(d,2);
                if ncol == 0
                    continue
                end
                startCol = numel(allY) + 1;
                for col = 1:ncol
                    labels{end+1} = sprintf('%s_Phase%d', legends{i}, col); %#ok<AGROW>
                    allT{end+1}   = ts.Time(:);                                %#ok<AGROW>
                    allY{end+1}   = d(:,col);                                   %#ok<AGROW>
                end
                colsByModel{i} = startCol:(startCol+ncol-1);
            end
        end
    end

    if isempty(allY)
        warning('No data found for "%s" in %s of any model.', varName, sourceStruct);
        return
    end

    % ----- Common time base and data matrix -----
    allTimes = unique(cell2mat(allT(:)));
    N = numel(allTimes);
    DataMat = nan(N, numel(allY));
    for k = 1:numel(allY)
        tk = allT{k};
        yk = allY{k};
        if ~isempty(tk) && ~isempty(yk) && numel(tk)==numel(yk)
            DataMat(:,k) = interp1(tk, yk, allTimes, 'linear', 'extrap');
        end
    end

    presentModels = find(~cellfun('isempty', colsByModel));
    M = numel(presentModels);

    % Decide subplot figure layout by number of models present
    if M <= 6
        figLayout = [2 2 2];      % three figures: 2,2,2 models
    else
        figLayout = [3 2 2];      % three figures: 3,2,2 models
    end

    % ----- Plotting -----
    if subplotLayout
        % Make 3 images total with model subplots; in each subplot, plot all phases in same color
        idxModel = 1;
        imgCount = 0;
        for nperfig = figLayout
            if idxModel > M, break; end
            imgCount = imgCount + 1;
            hFig = figure('Visible', onoff(showPlots));
            for s = 1:nperfig
                if idxModel > M, break; end
                mi = presentModels(idxModel);
                cols = colsByModel{mi};

                subplot(nperfig,1,s);
                hold on
                for jj = 1:numel(cols)
                    % All phases share the same model color; no perâ€‘phase legend
                    plot(allTimes, DataMat(:,cols(jj)), ...
                         'LineWidth', 1.8, 'Color', modelColors(mi,:));
                end
                hold off
                grid on
                xlabel('Time','FontWeight','bold');
                ylabel(yLabelStr,'FontWeight','bold');
                title(legends{mi},'FontWeight','bold');
                set(gca,'FontWeight','bold');

                idxModel = idxModel + 1;
            end
            if savePlots
                folderPath = fullfile('Results', varName, 'Images');
                if ~exist(folderPath,'dir'), mkdir(folderPath); end
                saveas(hFig, fullfile(folderPath, sprintf('%s_subplot_%d.png', varName, imgCount)));
            end
            if ~showPlots, close(hFig); end
        end

    else
        % All-in-one: for each model, plot all its phases on same axes in the same color
        hFig = figure('Visible', onoff(showPlots));
        hold on
        for k = 1:numel(presentModels)
            mi = presentModels(k);
            cols = colsByModel{mi};
            for jj = 1:numel(cols)
                h = plot(allTimes, DataMat(:,cols(jj)), ...
                         'LineWidth', 1.6, 'Color', modelColors(mi,:), ...
                         'DisplayName', legends{mi});
                if jj > 1
                    % keep legend to one entry per model only
                    set(h,'HandleVisibility','off');
                end
            end
        end
        hold off
        grid on
        xlabel('Time','FontWeight','bold');
        ylabel(yLabelStr,'FontWeight','bold');
        title(['All Models: ' strrep(varName,'_',' ')],'FontWeight','bold');
        legend(legends(presentModels), 'Location','southeast');   % 1 entry per model
        set(gca,'FontWeight','bold');

        if savePlots
            folderPath = fullfile('Results', varName, 'Images');
            if ~exist(folderPath,'dir'), mkdir(folderPath); end
            saveas(hFig, fullfile(folderPath, sprintf('%s_allinone.png', varName)));
        end
        if ~showPlots, close(hFig); end
    end

    % ----- CSV (Time + every curve/phase) -----
    csvFolder = fullfile('Results', varName);
    if ~exist(csvFolder,'dir'), mkdir(csvFolder); end
    csvFilePath = fullfile(csvFolder, 'Data.csv');
    writetable(array2table([allTimes DataMat], ...
        'VariableNames', ['Time', labels]), csvFilePath);
end

function v = onoff(b)
    if b, v = 'on'; else, v = 'off'; end
end
